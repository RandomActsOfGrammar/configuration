#!/bin/bash

#black  30              normal                                  0
#red    31              bold/lighter                            1
#green  32              darker                                  2
#yellow 33              italicized                              3
#blue   34              underlined                              4
#purple 35              (indeterminate)                         5
#cyan   36              (indeterminate)                         6
#white  37              color background on prompt,             7
#                            words terminal background color
#                       transparent (disappears)                8
#                       strikethrough                           9
START_COLOR=30
BAD_COLORS=( "30" )
END_COLOR=37
COLOR_CHANCE_OF_INCLUSION=3 #chance of including each color is
                            # 1/COLOR_CHANCE_OF_INCLUSION

START_STYLE=0
BAD_STYLES=("5" "6" "8")
END_STYLE=9
STYLE_CHANCE_OF_INCLUSION=2 #chance of including each style is
                            # 1/STYLE_CHANCE_OF_INCLUSION

#if DO_FULL_RANGE is 0, it will include all colors and styles in range between
#  the respective start and end variables and not in the bad lists
#the chance of it being 0 is 1/DO_FULL_RANGE_CHANCE
DO_FULL_RANGE_CHANCE=10
DO_FULL_RANGE=$((RANDOM % DO_FULL_RANGE_CHANCE))






#check if first argument is in the array of the second argument
# call example: if [ member $color array_name ] ; then
member() {
    search_item=$1
    arr_name=$2[@]
    array=("${!arr_name}")
    for item in "${array[@]}"; do
        if [ "$search_item" == "$item" ]; then
            return 0
        fi
    done
    return 1
}

#find and return the next value from the array (circles back to beginning)
# call example: var=$(find_in_array $color array_name)
find_in_array() {
    search_item=$1
    arr_name=$2[@]
    array=("${!arr_name}")
    arr_length=${#array[@]}
    i=0
    for item in "${array[@]}" ; do
        if [ "$item" = "$search_item" ] ; then
            echo ${array[$(( (i + 1)%arr_length ))]} #equivalent of return here
        fi
        i=$((i + 1))
    done
}

#carry out rotation of colors and styles
rotate(){
    #color rotation
    CURRENT_PROMPT_COLOR_NUM=$(find_in_array $CURRENT_PROMPT_COLOR_NUM COLORS_FOR_THIS_TERM)
    if [[ $CURRENT_PROMPT_COLOR_NUM = ${COLORS_FOR_THIS_TERM[0]} ]]; then #gone through all colors
        #style rotation
        CURRENT_PROMPT_TEXT_NUM=$(find_in_array $CURRENT_PROMPT_TEXT_NUM STYLES_FOR_THIS_TERM)
    fi
}

#create a list of colors that randomly includes the differet colors
build_random_colors(){
    COLORS_FOR_THIS_TERM=()
    ALL_COLORS=()
    COUNTER=$START_COLOR
    while [ "$COUNTER" -le "$END_COLOR" ]; do
        if ! member $COUNTER BAD_COLORS ; then
            ALL_COLORS+=($COUNTER)
            include_color=$((RANDOM % COLOR_CHANCE_OF_INCLUSION))
            if [ "$DO_FULL_RANGE" == "0" ] || [ "$include_color" -eq 1 ] ; then
                COLORS_FOR_THIS_TERM+=($COUNTER)
            fi
        fi
        COUNTER=$((COUNTER + 1))
    done
    if [ ${#COLORS_FOR_THIS_TERM[@]} -eq 0 ] ; then
        COLORS_FOR_THIS_TERM=(${ALL_COLORS[$((RANDOM%${#ALL_COLORS[@]}))]})
    fi
}

#create a list of styles that randomly includes the different styles
build_random_styles(){
    STYLES_FOR_THIS_TERM=()
    ALL_STYLES=()
    COUNTER=$START_STYLE
    while [ $COUNTER -le $END_STYLE ]; do
        if ! member $COUNTER BAD_STYLES ; then
            ALL_STYLES+=($COUNTER)
            include_style=$((RANDOM % STYLE_CHANCE_OF_INCLUSION))
            if [ "$DO_FULL_RANGE" == "0" ] || [ "$include_style" -eq 1 ] ; then
                STYLES_FOR_THIS_TERM+=($COUNTER)
            fi
        fi
        COUNTER=$((COUNTER + 1))
    done
    if [ ${#STYLES_FOR_THIS_TERM[@]} -eq 0 ] ; then
        STYLES_FOR_THIS_TERM=(${ALL_STYLES[$((RANDOM%${#ALL_STYLES[@]}))]})
    fi
}



main(){
    if [ -z $COLORS_FOR_THIS_TERM ]; then
        build_random_colors
    fi
    if [ -z $STYLES_FOR_THIS_TERM ]; then
        build_random_styles
    fi

    #set numbers at end to start at beginning with first one
    if [ -z $CURRENT_PROMPT_COLOR_NUM ]; then
        length=${#COLORS_FOR_THIS_TERM[@]}
        CURRENT_PROMPT_COLOR_NUM=${COLORS_FOR_THIS_TERM[$((length - 1))]}
    fi

    if [ -z $CURRENT_PROMPT_TEXT_NUM ]; then
        length=${#STYLES_FOR_THIS_TERM[@]}
        CURRENT_PROMPT_TEXT_NUM=${STYLES_FOR_THIS_TERM[$((length - 1))]}
    fi

    #rotate the colors and styles
    rotate
}


main

#export so these are kept for the duration of the term
export COLORS_FOR_THIS_TERM
export STYLES_FOR_THIS_TERM
export CURRENT_PROMPT_COLOR_NUM
export CURRENT_PROMPT_TEXT_NUM







#create some preset color groups we can set with a function
toPatriot(){
    COLORS_FOR_THIS_TERM=(31 34 37)
    CURRENT_PROMPT_COLOR_NUM=37
}

toCandyCane(){
    COLORS_FOR_THIS_TERM=(31 37)
    CURRENT_PROMPT_COLOR_NUM=37
}

toBlue(){
    COLORS_FOR_THIS_TERM=(34 36 37)
    CURRENT_PROMPT_COLOR_NUM=37
}

toChristmas(){
    COLORS_FOR_THIS_TERM=(31 32)
    CURRENT_PROMPT_COLOR_NUM=32
}

toSweden(){
    COLORS_FOR_THIS_TERM=(33 34)
    CURRENT_PROMPT_COLOR_NUM=34
}


#let people pick their colors
pickPS1Colors(){
    COLORS_FOR_THIS_TERM=()
    counter=$START_COLOR
    while [ "$counter" -le "$END_COLOR" ]; do
        if ! member $counter BAD_COLORS ; then
            echo -e -n "\e[${counter}mThis color (Y/n)?  \e[m"
            read yesno
            case $yesno in
                n*|N*)
                    ;;
                *)
                    COLORS_FOR_THIS_TERM+=($counter)
                    ;;
            esac
        fi
        counter=$((counter + 1))
    done
    #check if they didn't choose anything
    if [ ${#COLORS_FOR_THIS_TERM[@]} -eq 0 ] ; then
        echo "No colors chosen; setting colors randomly"
        build_random_colors
    else
        CURRENT_PROMPT_COLOR_NUM=${COLORS_FOR_THIS_TERM[$((length - 1))]}
        CURRENT_PROMPT_TEXT_NUM=${STYLES_FOR_THIS_TERM[$((length - 1))]}
    fi
}

#let people pick their styles
pickPS1Styles(){
    STYLES_FOR_THIS_TERM=()
    counter=$START_STYLE
    while [ "$counter" -le "$END_STYLE" ]; do
        if ! member $counter BAD_STYLES ; then
            echo -e -n "\e[${counter}mThis style (Y/n)?  \e[m"
            read yesno
            case $yesno in
                n*|N*)
                    ;;
                *)
                    STYLES_FOR_THIS_TERM+=($counter)
                    ;;
            esac
        fi
        counter=$((counter + 1))
    done
    #check if they didn't choose anything
    if [ ${#STYLES_FOR_THIS_TERM[@]} -eq 0 ] ; then
        echo "No styles chosen; setting styles randomly"
        build_random_styles
    else
        CURRENT_PROMPT_COLOR_NUM=${COLORS_FOR_THIS_TERM[$((length - 1))]}
        CURRENT_PROMPT_TEXT_NUM=${STYLES_FOR_THIS_TERM[$((length - 1))]}
    fi
}



#for debugging:
debugPrintColors(){
    printf '%s\n' "${COLORS_FOR_THIS_TERM[@]}"
}
debugPrintStyles(){
    printf '%s\n' "${STYLES_FOR_THIS_TERM[@]}"
}
debugPrintCurrentColor(){
    echo $CURRENT_PROMPT_COLOR_NUM
}
debugPrintCurrentStyle(){
    echo $CURRENT_PROMPT_STYLE_NUM
}
debugPrintCurrentColorIndex(){
    echo $COLOR_INDEX
}
debugPrintCurrentStyleIndex(){
    echo $STYLE_INDEX
}

